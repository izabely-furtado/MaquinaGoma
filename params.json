{"name":"Maquinagoma","tagline":"Exercicio 1 de 8 da Lista de Padrões de Projeto","body":"### **Diagrama do Padrão State Implementado**\r\n\r\n![](https://github.com/izabely-furtado/MaquinaGoma/blob/master/diagramas/Padr%C3%A3o%20State%20Implementado.png?raw=true)\r\n\r\n### **Explicação da Implantação do Método**\r\n\r\nAplicando a teoria sobre state, nota-se no diagrama o encapsulamento de cada estado indicado em uma classe, e para a alteração o estado da classe contexto vamos ter uma ação invocada (+solicitaGoma(moeda : int)) de acordo com o fluxo indicado no exercício.\r\n\r\nE como implementaremos isso?\r\n\r\nPrimeiro vamos ter que criar uma interface para os estados que será implementado pela classe MaquinaState como abstrata e sobreescrita por cada um dos estados.\r\n\r\n1.    public interface IMaquinaState {\r\n2.         void solicitaGoma(int moeda);\r\n3.    }\r\n\r\nNa classe Maquina a função +solicitaGoma de uma forma a qual solicita o pedido de acordo com o estado atual a qual se encontra a máquina, que está descrita da seguinte forma:\r\n\r\n1.    public void solicitaGoma(int moeda) {\r\n2.         this.meuEstado.solicitaGoma(moeda);\r\n3.         System.out.println(this.meuEstado.toString());\r\n4.    }\r\n\r\nJá nos estados concretos, esta função é chamada de uma forma a qual processe o dado a partir de um determinado ponto e encaminhe para o próximo estado, da seguinte forma, na classe RecebeMoeda, por exemplo:\r\n\r\n1.     @Override\r\n2.     public void solicitaGoma(int moeda) {\r\n3.         \r\n4.         if (moeda == 1){\r\n5.             System.out.println(\"Acione a Lavanca\");\r\n6.             this._maquina.setEstado(new GomaVendida(this._maquina));\r\n7.             this._maquina.solicitaGoma(moeda);\r\n8.         }\r\n9.         else{\r\n10.            System.out.println(\"Moeda inadequada inserida\");\r\n11.            this._maquina.setEstado(new SemMoeda(this._maquina));\r\n12.            this._maquina.solicitaGoma(moeda);\r\n13.        }\r\n14.    }\r\n\r\nOs pontos importantes que deve-se observar são:\r\n\r\n* A variável privada da classe Maquina;\r\n\r\n* Os construtores que recebem como parâmetro um objeto da classe Maquina.\r\n\r\nA variável _maquina representar nossa classe contexto dentro do estado e vai ser utilizado para todas as alterações e consulta de valores da Maquina.\r\n\r\nOs construtores recebem a própria classe contexto para a criação do estado.\r\n\r\nComo todas as classes que vão representar um possível estado para nossa classe contexto tem um contrato com a interface IMaquinaState podemos criar uma variável na nossa classe a partir dessa interface para representar o estado.\r\n\r\n### **Motivação**\r\n\r\nEm comparação a classe criada sem o padrão, temos uma classe menor  e mais simples, uma vez que a decisão de qual estado ele vai estar depois da chamada dos métodos não cabe mais a classe contexto e sim a cada classe encapsulada que representa um estado do mesmo modo que a execução do método que esta sendo delegado ao estado atual. Devemos observar também que para setarmos qualquer estado estamos utilizamos “MeuEstado = new [EstadoConcreto]([Contexto])”  isso ocorre tanto na criação da classe contexto quanto nas alterações dos estados.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}